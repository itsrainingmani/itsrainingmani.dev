---
import { getCollection } from "astro:content";
import BaseLayout from "@/layouts/BaseLayout";
import Action from "@/components/Action";
import Icon from "@/components/Icon";
import ProjectCard from "@/components/ProjectCard";

const pageTitle = "Technical Archive";
const projects = await getCollection("projects");
projects.sort((a, b) => b.data.createdYear - a.data.createdYear);

// grid-cols-2  -> 2 columns that occupy free space (fr)

// Control the size of the implicitly-created grid rows
// auto-rows-fr -> grid-auto-rows: minmax(0, 1fr);
---

<script is:inline>
	function randomBorderFx(e) {
		const card = e.querySelector(".card");
		card.style.borderBottomRightRadius = `${Math.max(7, Math.floor(30 * Math.random()))}px`;
		card.style.borderBottomLeftRadius = `${Math.max(7, Math.floor(30 * Math.random()))}px`;
		card.style.borderTopRightRadius = `${Math.max(7, Math.floor(30 * Math.random()))}px`;
		card.style.borderTopLeftRadius = `${Math.max(7, Math.floor(30 * Math.random()))}px`;
		card.style.transform = "scale("
			.concat(1 - Math.random() / 3, ") translate2D(")
			.concat(Math.floor(3 - 6 * Math.random()), "px, ")
			.concat(Math.floor(3 - 6 * Math.random()), "px)");

		let a = Math.random() > 0.8 ? 2 : 0,
			n = Math.floor(3 - 6 * Math.random()) / (1 + a);
		card.style.boxShadow = ""
			.concat(n, "px ")
			.concat(Math.floor(3 - 6 * Math.random()) / (1 + a), "px 0px ")
			.concat(a, "px ")
			.concat(
				"rgb(" +
					(Math.floor(128 * Math.random()) + 128) +
					"," +
					(Math.floor(128 * Math.random()) + 128) +
					"," +
					(Math.floor(128 * Math.random()) + 128) +
					")",
				", 0 ",
			)
			.concat(2 + Math.floor(4 * Math.random()), "px ")
			.concat(8 + Math.floor(12 * Math.random()), "px #0006");
	}
	document.addEventListener("astro:page-load", () => {
		const containers = document.querySelectorAll(".card-container");
		containers.forEach((container) => {
			container?.addEventListener("mouseenter", (e) => {
				randomBorderFx(container);
			});
			setInterval(() => {
				randomBorderFx(containers[Math.floor(Math.random() * containers.length)]);
			}, 880);
		});
	});
</script>

<BaseLayout pageTitle={pageTitle}>
	<div class="my-4 flex flex-col md:flex-row">
		<h1 class="basis-2/3 self-start text-left text-3xl md:text-4xl">{pageTitle}</h1>
		<blockquote
			class="font-sm basis-1/3 border-l border-l-black px-3 py-1.5 text-sm italic text-gray-500"
		>
			Systems, in one sense, are devices that take input and produce an output. A system can be
			thought to operate on the input to produce the output.
		</blockquote>
	</div>
	<hr />
	<div class="project-grid grid grid-flow-row grid-cols-1 gap-2 text-center md:grid-cols-2">
		{projects.map((project) => <ProjectCard {project} />)}
	</div>
</BaseLayout>
